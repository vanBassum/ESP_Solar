#include <iostream>
#include <string>
#include <vector>
#include <map>

const char* capture =
"/KMP5 ZABF001587315111 (KMP lijkt de identificatie te zijn van Kamstrup)                                                     \r\n"
"0-0:96.1.1(205C4D246333034353537383234323121) (serienummer meter in hexadecimale ascii code)                                 \r\n"
"1-0:1.8.1(00185.000*kWh) (Totaal verbruik tarief 1 (nacht))                                                                  \r\n"
"1-0:1.8.2(00084.000*kWh) (Totaal verbruik tarief 2 (dag))                                                                    \r\n"
"1-0:2.8.1(00013.000*kWh) (Totaal geleverd tarief 1 (nacht))                                                                  \r\n"
"1-0:2.8.2(00019.000*kWh) (Totaal geleverd tarief 2 (dag))                                                                    \r\n"
"0-0:96.14.0(0001) (Actuele tarief (1))                                                                                       \r\n"
"1-0:1.7.0(0000.98*kW) (huidig verbruik)                                                                                      \r\n"
"1-0:2.7.0(0000.00*kW) (huidige teruglevering)                                                                                \r\n"
"0-0:17.0.0(999*A) (maximum stroom per fase                                                                                   \r\n"
"0-0:96.3.10(1) (stand van de schakelaar)                                                                                     \r\n"
"0-0:96.13.1() (bericht numeriek)                                                                                             \r\n"
"0-0:96.13.0() (bericht tekst)                                                                                                \r\n"
"0-1:24.1.0(3) (andere apparaten op de M-Bus)                                                                                 \r\n"
"0-1:96.1.0(3238313031453631373038389930337131) (identificatie van de gasmeter)                                               \r\n"
"0-1:24.3.0(120517020000)(08)(60)(1)(0-1:24.2.1)(m3) (tijd van de laatste gas meting (120517020000 = 17 mei 2012 2uur))       \r\n"
"(00124.477) (Verbruikte hoeveelheid gas)                                                                                     \r\n"
"0-1:24.4.0(1) (stand gasklep?)                                                                                               \r\n"
"! (Afsluiter)                                                                                                                \r\n";



struct DSMR
{
    float TotalConsumption1;
    float TotalConsumption2;
    float TotalProduction1;
    float TotalProduction2;
    float ActualConsumption;
    float ActualProduction;
    float TotalGasConsumption;
    uint32_t ActualTarrif;

};


struct DSMR_Parser
{

    static int ParseTotalConsumption1(DSMR& dsmr, std::string& raw, int pos)
    {
        size_t start = raw.find('(', pos) + 1;
        if (start >= 0)
        {
            dsmr.TotalConsumption1 = std::stof(&raw[start], &start);
            return start;
        }
        return 0;
    }

    struct DSMR_ValueParser
    {
        std::string key;
        int (*Parse)(DSMR& dsmr, std::string& raw, int start);
    };

    const std::vector<DSMR_ValueParser> valueParsers{
          {"1-0:1.8.1", ParseTotalConsumption1}
    };


    void Parse(std::string& raw, DSMR& dsmr)
    {
        int ptr = 0;
        int len = raw.size();
        int pcnt = valueParsers.size();

        while (ptr < len && ptr >= 0)
        {
            bool parsed = false;
            for (int i = 0; i < pcnt; i++)
            {
                if (raw.rfind(valueParsers[i].key, ptr) == ptr) {
                    int consumed = valueParsers[i].Parse(dsmr, raw, ptr);
                    if (consumed > 0)
                    {
                        ptr = consumed + 1;
                        parsed = true;
                    }
                }
            }
            if (!parsed)
            {
                ptr = raw.find('\n', ptr) + 1;
                printf(&raw.c_str()[ptr]);
            }
        }
    }
};

int main()
{
    DSMR meas;
    std::string raw(capture);
    DSMR_Parser p;
    p.Parse(raw, meas);
}
